{"version":3,"sources":["componenets/ToDo/ToDo.tsx","componenets/Timer/Timer.tsx","componenets/InProgress/InProgress.tsx","componenets/Done/Done.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ToDo","props","useState","isHiddenNewTask","setStatus","currentValue","setValue","allTasks","toDoTask","map","task","style","border","margin","display","flexDirection","alignItems","padding","key","id","taskName","type","className","onClick","addTaskInProgressStatus","borderRight","placeholder","width","value","onChange","event","currentTarget","addNewTask","Timer","state","count","countTimers","setInterval","setState","totalTime","this","hours","Math","floor","minutes","seconds","React","Component","InProgress","tasksInProgress","counter","sendTaskToDone","Done","tasksDone","price","App","tasksTodo","random","saveState","localStorage","setItem","JSON","stringify","restoreState","stateAsString","getItem","parse","toFixed","alert","filter","forEach","item","justifyContent","borderBottom","paddingBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.725b710e.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    toDoTask: Array<TaskType>\r\n    addTaskInProgressStatus: (id: number, taskName: string) => void\r\n    addNewTask: (currentValue:string) => void\r\n}\r\n\r\nconst ToDo: React.FC<OwnPropsType> = (props) => {\r\n\r\n    const [isHiddenNewTask, setStatus] = useState(true);\r\n    const [currentValue, setValue] = useState('');\r\n    const changeValue = (event: React.ChangeEvent<HTMLTextAreaElement>) =>{\r\n        setValue(event.currentTarget.value)\r\n    }\r\n\r\n\r\n    //map-им все задачи в статусе ToDO для дальнейшей отрисовки\r\n    const allTasks = props.toDoTask.map(task => <div\r\n        style={{border: '1px solid black', margin: '10px', display:'flex', flexDirection:'column', alignItems: 'center', padding:'0 5px'}}\r\n        key={task.id}>{task.taskName}\r\n        <div>\r\n            <button type=\"button\" className=\"btn btn-sm btn-success mb-2 mt-3\"\r\n                    onClick={() => props.addTaskInProgressStatus(task.id, task.taskName)}> Начать\r\n            </button>\r\n        </div>\r\n    </div>)\r\n    return (\r\n        <div className=\"container\" style={{borderRight: '1px solid black', display:'flex', flexDirection:'column', alignItems: 'center'}}>\r\n            <div >{allTasks}</div>\r\n            {isHiddenNewTask\r\n              ?  <div>\r\n                    <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={()=> setStatus(false)}> Новая задача </button>\r\n                </div>\r\n              : <div style={{display:'flex', flexDirection:'column', alignItems:'center'}} >\r\n                    <div>\r\n                        <textarea placeholder='введите название задачи' style={{width:'250px'}} value={currentValue} onChange={changeValue} ></textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={() => {props.addNewTask(currentValue); setStatus(true); setValue('')}}> Добваить задачу </button>\r\n                    </div>\r\n                </div>\r\n            }\r\n\r\n            {/*<div>*/}\r\n            {/*    <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={()=> setStatus(false)}> Новая задача </button>*/}\r\n            {/*</div>*/}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ToDo;\r\n","import React from \"react\";\r\n\r\n\r\ntype StateType = {\r\n    count: number\r\n}\r\n\r\ntype OwnPropsType = {\r\n    totalTime: (id: number, count: number) => void\r\n    id: number\r\n    currentValue: number\r\n}\r\n\r\n\r\nclass Timer extends React.Component<OwnPropsType, StateType> {\r\n\r\n    // счетчик для каждой задачи\r\n    state: StateType = {\r\n        count: this.props.currentValue\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.countTimers();\r\n    }\r\n\r\n    countTimers = (): void => {\r\n        setInterval((): void => {\r\n            this.setState({\r\n                count: this.state.count + 1,\r\n            },  () => {\r\n                this.props.totalTime(this.props.id, this.state.count)\r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n\r\n        let count = this.state.count,\r\n            hours = Math.floor((count % (60 * 60 * 24)) / (60 * 60)),\r\n            minutes = Math.floor((count % (60 * 60)) / 60),\r\n            seconds = Math.floor(count % (60));\r\n\r\n\r\n        return (\r\n            <div>\r\n                <span>{hours >= 10 ? hours : `0${hours}`}:</span>\r\n                <span>{minutes >= 10 ? minutes : `0${minutes}`}:</span>\r\n                <span>{seconds >= 10 ? seconds : `0${seconds}`}</span>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from \"react\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    tasksInProgress: Array<TaskType>\r\n    sendTaskToDone: (id: number, taskName: string, count: number) => void\r\n    counter: (id: number, count: number) => void\r\n}\r\n\r\nconst InProgress: React.FC<OwnPropsType> = (props) => {\r\n\r\n    //map-им все задачи в статусе InProgress для дальнейшей отрисовки\r\n    const allTasks = props.tasksInProgress.map(task => <div\r\n        style={{\r\n            border: '1px solid black',\r\n            margin: '10px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            padding: '0 5px'\r\n        }}\r\n        key={task.id}>\r\n        {task.taskName}\r\n        <Timer id={task.id} currentValue={task.count} totalTime={props.counter}/>\r\n        <button type=\"button\" className=\"btn btn-sm btn-info mb-2\"\r\n                onClick={() => props.sendTaskToDone(task.id, task.taskName, task.count)}> Завершить\r\n        </button>\r\n    </div>)\r\n    return (\r\n        <div className=\"container\" style={{\r\n            borderRight: '1px solid black',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        }}>{allTasks}</div>\r\n    )\r\n}\r\n\r\nexport default InProgress;","import React from \"react\";\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    tasksDone: Array<TaskType>\r\n}\r\n\r\nexport const Done:React.FC<OwnPropsType> = (props) => {\r\n\r\n    //map-им все задачи в статусе Done для дальнейшей отрисовки\r\n    const allTasks = props.tasksDone.map(task => <div key={task.id}\r\n        style={{\r\n            border: '1px solid black',\r\n            margin: '10px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            padding: '0 5px'\r\n        }}>\r\n            <div>\r\n                {task.taskName}\r\n            </div>\r\n            <div>\r\n                <b> Стоимость: {task.price} руб.</b>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className = \"container\" style={{display:'flex', flexDirection:'column', alignItems: 'center'}}>{allTasks}</div>\r\n    )\r\n}\r\n\r\nexport default Done;","import React from 'react';\nimport ToDo from \"./componenets/ToDo/ToDo\";\nimport InProgress from \"./componenets/InProgress/InProgress\";\nimport Done from \"./componenets/Done/Done\";\nimport {TaskType} from \"./types/entities\";\n\ntype StateType = {\n    tasksTodo: Array<TaskType>,\n    tasksInProgress: Array<TaskType>,\n    tasksDone: Array<TaskType>,\n}\n\nclass App extends React.Component {\n\n    // локальный state всего приложения\n    state: StateType = {\n        tasksTodo: [\n            {id: Math.random(), taskName: 'искать работу'},\n            {id: Math.random(), taskName: 'активнее искать работу'},\n            {id: Math.random(), taskName: 'еще более активно искать работу'}\n        ],\n\n        tasksInProgress: [],\n\n        tasksDone: []\n    }\n\n    // функция по сохранению изменений в state в localStorage\n    saveState = (): void => {\n        localStorage.setItem(\"our-state\", JSON.stringify(this.state))\n    };\n\n    // восстановление state из localStorage\n    restoreState = (): void => {\n        let stateAsString = localStorage.getItem(\"our-state\");\n        if (stateAsString) {\n            let state = JSON.parse(stateAsString);\n            this.setState(state)\n        }\n    };\n\n    componentDidMount(): void {\n        this.restoreState();\n    }\n\n    addNewTask = (task: string) => {\n        if (task) {\n            this.setState({\n                tasksTodo: [...this.state.tasksTodo, {\n                    id: (Math.random()).toFixed(4),\n                    taskName: task\n                }]\n            }, (): void => {\n                this.saveState()\n            })\n        } else {\n            alert('Введено пустое значение')\n        }\n    }\n\n    // функция по переносу задачи в раздел InProgress\n    addTaskInProgressStatus = (id: number, task: string): void => {\n        this.setState({\n            tasksTodo: this.state.tasksTodo.filter(task => task.id !== id),\n            tasksInProgress: [...this.state.tasksInProgress, {id: id, taskName: task, count: 0}]\n        }, (): void => {\n            this.saveState()\n        })\n    }\n\n    // функция по переносу задачи в раздел Done\n    sendTaskToDone = (id: number, task: string, count = 0): void => {\n        const price = 1000; // стоимость часа работ\n        this.setState({\n            tasksInProgress: this.state.tasksInProgress.filter(task => task.id !== id),\n            tasksDone: [...this.state.tasksDone, {id: id, taskName: task, price: ((count / 3600) * price).toFixed(2)}]\n        }, (): void => {\n            this.saveState()\n        })\n    }\n\n    // функция по сохранению времени, в течении которого выполняется задача\n    counter = (id: number, count: number) => {\n        this.saveState();\n        this.state.tasksInProgress.forEach((item) => {\n            if (item.id === id) {\n                item.count = count\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div style={{display: 'flex', flexDirection: 'column'}}>\n                <div style={{\n                    display: 'flex',\n                    justifyContent: 'space-around',\n                    borderBottom: '1px solid black',\n                    margin: '5px 0 5px 0',\n                    paddingBottom: '10px'\n                }}>\n                    <div><b>ToDo</b></div>\n                    <div><b>InProgress</b></div>\n                    <div><b>Done</b></div>\n\n                </div>\n                <div className=\"container-fluid d-flex justify-content-around mt-2\">\n\n                    <ToDo toDoTask={this.state.tasksTodo} addNewTask={this.addNewTask}\n                          addTaskInProgressStatus={this.addTaskInProgressStatus}/>\n                    <InProgress tasksInProgress={this.state.tasksInProgress} sendTaskToDone={this.sendTaskToDone}\n                                counter={this.counter}/>\n                    <Done tasksDone={this.state.tasksDone}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}